const path = require('path');
const fs = require('fs');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const User = require('../models/userSchema'); 
const {sendPasswordEmail, verifyPassword} = require('../middlewares/email');
const Token = require('../models/Token');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const crypto = require('crypto')



// admin login
exports.adminauth = async (req, res) => {
    const locals = {
        title: 'Admin login' 
    }
    res.render('admin/admin-auth', locals);
};

exports.adminAuthPost = async (req, res) => {
    try {
        const { email, password } = req.body;
        console.log('Login attempt:', { email }); // Log login attempt

        if (email !== "sakshamalways@gmail.com") {
            console.log('Access denied: incorrect email');
            return res.status(403).json({ message: "Access Denied" });
        }

        const user = await User.findOne({ email });
        if (!user) {
            console.log('User not found in database');
            return res.status(400).json({ message: "User not found" });
        }

        console.log('Found user, comparing passwords...'); // Log password comparison
        const isMatch = await bcrypt.compare(password, user.password);
        console.log('Password match result:', isMatch); // Log password match result

        if (!isMatch) {
            console.log('Password mismatch');
            return res.status(400).json({ message: "Invalid credentials" });
        }

        const token = jwt.sign({ email }, process.env.JWT_ADMIN_SECRET, { expiresIn: "7d" });
        res.cookie('token', token, { httpOnly: true });
        
        console.log('Login successful, redirecting to admin');
        return res.redirect('/admin');
    } catch (error) {
        console.error('Login error:', error);
        return res.status(500).json({ message: "Server error", error: error.message });
    }
};
exports.adminAuthLogout = async (req, res) => {
    res.clearCookie('token');
    res.clearCookie('refreshToken');
    res.redirect('/admin/login');
};



// user register
exports.userRegister = async(req, res) => {
    let locals = {
        title: 'Registration'
    }
    res.render('user-registeration/user-register', locals);
};

exports.userRegisterPost = async(req, res) => {
    // console.log("Incoming registration data:", req.body);
    try {
        const { username, email, password } = req.body;

        // Check for existing user
        const existingEmailUser = await User.findOne({ email });
        if (existingEmailUser) {
            return res.status(400).json({ errors: { email: "Email already exists" } });
        }

        // Create new user (password hashing is handled by schema)
        const user = await User.create({ username, email, password });

        await sendPasswordEmail(email, password);

        const token = await new Token({
            userId: user._id,
            token: crypto.randomBytes(32).toString('hex')
        }).save()
        const url = `${process.env.BASE_URL}user/${user._id}/verify/${token.token}`
        await verifyPassword(user.email, "Verify Email", url);

        res.status(201).json({
            success: true,
            message: "An email sent to your account. Please verify your email."
        });

        //generate verification token
        // const token = new Token(
        //     {userId: user._id ,
        //         token:crypto.randomBytes(16).toString('hex')
        //     }
        // );
        // await token.save();
        // console.log(token);

        // Generate JWT token
        // const token = jwt.sign(
        //     { id: user._id, email: user.email },
        //     process.env.JWT_SECRET_KEY,
        //     { expiresIn: '1d' }
        // );

        // // Set cookie and send response
        // res.cookie("jwt", token);
        // res.status(201).json({
        //     success: true,
        //     user: {
        //         id: user._id,
        //         email: user.email,
        //         username: user.username
        //     },
        //     token,
        //     redirectUrl: '/user/login'
        // });

    } catch (error) {
        console.error("Error creating user:", error);
        if (error.name === "ValidationError") {
            const errors = {};
            Object.keys(error.errors).forEach(key => {
                errors[key] = error.errors[key].message;
            });
            return res.status(400).json({ errors });
        }
        return res.status(500).json({ error: "Registration failed" });
    }
};
exports.userVerify = async(req, res) => {
    try {
        const user = await User.findOne({_id: req.params.id})
        if(!user) return res.status(400).send({message: 'Invalid Link'});
        const token = await Token.findOne({
            userId: user._id,
            token: req.params.token
        });
        if(!token) return res.status(400).send({message: 'invalid link'});
        await User.updateOne({_id: user._id, isVerified: true});
        await token.remove();

        res.status(200).send({message: 'Email verified successfully'});
        
        
        
    } catch (error) {
        res.status(500).send({message: 'Internal Server Error'});
        console.log(error);
    }
};

exports.userLoginPost = async(req, res) => {
    const { email, password } = req.body;
    try {
        const user = await User.findOne({ email });
        if(!user){
            return res.status(400).json({ message: 'Invalid email or password' });
        }
        if(!user.isVerified){
            let token = await Token.findOne({ userId: user._id });
            if(!token){
                token = await new Token({
                    userId: user._id,
                    token: crypto.randomBytes(32).toString('hex')
                }).save();
                const url = `${process.env.BASE_URL}user/${user._id}/verify/${token.token}`;
                await verifyPassword(user.email, "Verify Email", url);
            }
            return res.status(400).send({ message: 'An email has been sent to your account for verification.' });
        }
            
        // if(user){
        //     const passwordMatch = await bcrypt.compare(password, user.password);
        //     if(passwordMatch){
        //         const token = jwt.sign({
        //             id: user._id,
        //             email: user.email
        //          }, process.env.JWT_SECRET_KEY, {
        //             expiresIn: '1d'
        //         });
        //         res.cookie("jwt", token);


        //         res.status(201).json({
        //             user:{
        //                 id: user._id,
        //                 email: user.email,
        //                 password: user.password
        //             },
        //             token
        //         })

        //     }else{
        //         return res.status(400).json({message: "Incorrect Email and Password", alert: "Please enter correct email and password"})
        //     }
            
        // }else{
        //     return res.status(400).json({message: "User not found", alert: "User not found"});
        // }

    } catch (error) {
        res.status(500).json({ message: "Login failed", error, alert: "Invalid Creadentials"});
        console.log(error);
    }
}; 

exports.userLogin = async (req, res) => {
    let locals = {
        title: 'Login'
    }; 
    res.render('user-registeration/user-login', locals);
};

exports.userInfoProfilePost = async (req, res) => {

   
};
exports.userInfoProfileLogout = async (req, res) => {
    res.cookie("jwt", "", {maxAge: 1});
    res.redirect('/user/login');
};
